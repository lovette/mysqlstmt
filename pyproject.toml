[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "mysqlstmt"
version = "1.0.1"
description = "Python library to build SQL statements for MySQL."
readme = "README.md"
license = {file = "LICENSE"}
authors = [{name = "Lance Lovette", email = "lance.lovette@gmail.com"}]
keywords = ["python", "sql", "mysql"]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Database",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.9"

dependencies = [
]

[project.urls]
Source = "https://github.com/lovette/mysqlstmt"
Repository = "https://github.com/lovette/mysqlstmt.git"

[project.optional-dependencies]
dev = [
  "pyright",
  "pytest",
  "ruff",
]

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["docs*"]

# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
line-length = 150
target-version = "py39"

# https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
  "ALL",
]

ignore = [
  "ANN002", # https://docs.astral.sh/ruff/rules/missing-type-args/
  "ANN003", # https://docs.astral.sh/ruff/rules/missing-type-kwargs/
  "FBT001", # https://docs.astral.sh/ruff/rules/boolean-type-hint-positional-argument/
  "FBT002", # https://docs.astral.sh/ruff/rules/boolean-default-value-positional-argument/
  "S101",   # https://docs.astral.sh/ruff/rules/assert/
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  # https://github.com/astral-sh/ruff/issues/4368
  "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
  "D100", # undocumented-public-module
  "D101", # undocumented-public-class
  "D102", # undocumented-public-method
  "D103", # undocumented-public-function
  "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
  "PLR2004", # magic-value-comparison
  "S101", # asserts allowed in tests...
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
pythonpath = "src"

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
include = ["src", "tests"]
typeCheckingMode = "standard"
pythonVersion = "3.9"
